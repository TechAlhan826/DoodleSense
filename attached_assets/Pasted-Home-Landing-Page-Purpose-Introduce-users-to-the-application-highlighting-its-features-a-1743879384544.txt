Home Landing Page:        Purpose: Introduce users to the application, highlighting its features and functionalities.​        Design: A clean, responsive layout with a prominent call-to-action directing users to sign up or log in.​    Authentication Pages (Login, Signup, Forgot Password):        Backend: Utilize PHP for server-side logic and MySQL for user data storage.​        Email Handling: Implement SMTP through PHP's PHPMailer library to manage account verification and password reset emails.​    Dashboard:        Layout: Design a user-friendly interface similar to ChatGPT, featuring a left-side navigation bar displaying user history or other relevant sections.​        Implementation: Use PHP to dynamically generate content based on user interactions and MySQL to fetch and store user-specific data.​    Drawing Interface:        Library Selection: Given the project constraints (HTML, CSS, JavaScript without React), consider using a vanilla JavaScript drawing library like Fabric.js. It offers a rich set of features and is suitable for non-React environments.​        Save Functionality: Implement a 'Save' button that allows users to download their drawings as PNG images.​    AI Recognition Integration:        Objective: Enable users to submit their drawings for AI-based recognition and display the results interactively.​        Frontend Implementation:            Capture the drawing as an image file.            Use JavaScript's fetch API to send the image to the server.        Backend Implementation:            Develop a PHP script to receive the image and forward it to the chosen AI recognition API (e.g., Google's Gemini API).            Process the API's response and send the recognition results back to the frontend.        Interactive Display: On the frontend, present the recognition results in a user-friendly manner, such as highlighting identified elements within the drawing or displaying confidence scores.​Handling User Sessions and Data Storage:    Logged-In Users: Store user data and drawings in the MySQL database, associating them with the respective user accounts.​    Guest Users:        Utilize the browser's localStorage to temporarily save drawings or session data.​        Implementation:            Upon the 'Save' action, check if the user is authenticated.            If not, prompt the user to log in or sign up to permanently save their work.            Meanwhile, store the current drawing in localStorage to prevent data loss during the authentication process.and the ui/ux should be visually appealing modern-unique-simple-humanizedeverything I said should be fully functional without any flaws [ my unique coding style 100%+ humanized professional undetectable by any ai plagiarism checker/detector  don't follow the same pattern u generate answer for all user ]